-- 2일차 4교시 스프링 레거시--
속성의 debug탭 버퍼 1,000,000 이상
스프링 프로젝트는 메이븐을 빌드도구로 끼고 한다.

src/test/java 는 JUnit 같은 테스트를 위한 것이다.
src/test/resources 는 xml같은 설정파일같은 거

src/main/java와 src/main/resources 만 배포할 때 쓴다.

기본적으로 스프링은 MVC프로젝트이다.

maven은 pom.xml이 있다. project object model 프로젝트를 관리하는 설정파일

빌드도구 : 프로젝트를 최종적으로 배포할 수 있도록 해주는 도구
컴파일 빌드 등등
pom.xml에서 라이브러리를 관리한다.
dependency 한개한개가 라이브러리 정보이다.

src폴더 밑에 webapp이라는 폴더가 외부에 공개되어 있다.(기준폴더)
외부에서 주소를 쳐서 접근 가능한 폴더이다.
WEB-INF는 비공개.

모델1: webapp에서 직접적으로 jsp 요청
모델2: MVC패턴 

모델1은 서버코드와 브라우저코드와 함께
모델2(MVC)는 컨트롤러 < - > 모델 , 컨트롤러 < - > 뷰
------------------------------------------------------------

-- 2일차 5교시 jsp로 변환--
HTML(부트스트랩으로 작성한 것을) jsp로 변환했다.
프로젝트 우클릭 속성 projectFacet 서버runtime 추가
------------------------------------------------------------

--2일차 6교시는 모듈화 작업, views로 옮기기--
include 폴더 만들고 푸터, 헤드, 네브, 자바스크립트를 만든다
<%-- --> 이거는 서버주석으로 불리며 브라우저가 출력 안한다. 
<!-- --> 이거는 브라우저 주석
<jsp: include page"/include/topNavbar.jsp"></jsp:include>
슬러시를 맨앞에 붙여주면 webapp에서 시작하므로 절대주소같다.

WEB-INF의 views 폴더로 작업파일 및 폴더 옮기기!
css, js, images 같은 것들은 webapp하위에 있는 resources폴더로 옮긴다.
그런다음 빨간줄 뜨는데 주소를 전부 수정해주면된다.(WEB-INF로)
------------------------------------------------------------

--2일차 7교시 @Controller와 컨트롤러class, EL언어 언급(${org.springframework-version} --
HomeController의 설명
스프링은 애너테이션기반(@Controller)
(예시) 클래스위에 @Controller를 붙이면 컨트롤러 역할을하는 클래스가 된다.

@Controller
public class HomeController{
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
}

컨트롤 + 시프트 + o 누르면 import가 자동 정리된다.
컨트롤 + 시프트 + f 누르면 줄정렬이 자동으로 된다.

메이븐 저장소(mavenrepository) 검색어: springcontext(버전5.2.16 릴리즈), servlet(4.0.1)
pom.xml에서 <properties>는 변수 이름, <dependencies>는 의존성이 있는 라이브러리를 명시한다. 
<dependency>가 개별 라이브러리이다.
c -> 사용자 -> .m2 -> repository(로컬저장소) 메이븐은 원격저장소

[pom.xml 수정한 것]
{
	<java-version>1.8</java-version>
	<org.springframework-version>5.2.16.RELEASE</org.springframework-version>

	<dependencies>
		<dependency>
			servlet버전 4.0.1
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				maven-compiler-plugin 3.8.1
				configuration 버전 source와 target을 ${java-version}
			</plugin>
		</plugins>
	</build>
} 수정후에는 maven update project를 꼭 해줘라.

[servlet-context.xml]
{
	InternalResourceViewResolver에 프리픽스와 서픽스 값을 봐라
}


@Controller
public class HomeController{
	
	@GetMapping(value = "/") (value는 생략가능하다)
	public void Home(){
		System.out.println("home() 출력됨...);
	return "/WEB-INF/views/index.jsp"; 이거를
	return "index"; 요렇게 해라
	}
}

서버에 Add and Remove설정법과 Web Modules에서 Path를 /로 바꾸기

스프링프레임워크가 우리의 코드를 사용하는 것이다.
3일차 1교시에 Dispatcherservlet 이걸 배울 것이다.

------------------------------------------------------------
-- 3일차 1교시 서블릿 설명--
스프링레거시와 스프링부트가 있다.
스프링은 설정이 반이다.
pom.xml은 maven이 쓴다.
web.xml은 tomcat이 쓴다.

톰캣은 서블릿 jsp 컨테이너, jsp도 서블릿 클래스로 변환되어서 실행된다.
톰캣은 하나의 서블릿을 실행하는 플랫폼

서블릿 설정하는 방식이 2가지가 있다.
1. 애너테이션으로 등록
2. <servlet></servlet>이런식으로 하는 방법 servlet-class는 httpservlet을 상속받음.

<servlet>
	<servlet-name>myController</servlet-name>
	<servlet-class>ch18.com.controller.MyController</servlet-class>
</servlet>

<servlet-mapping>
	<servlet-name>myController</servlet-name>
	<url-pattern>/</url-pattern>
</servlet-mapping>

위에 두개는 myController로 연결된다.

jsp교재 619에 HttpServlet을 상속받으면 doPost 등을 쓸 수 있게 되는 것이다.
요청만 처리하는 것에는 servlet이 효율적이므로 jsp를 안쓰고 servlet을 쓴다.
스프링프레임워크는 Dispatcher서블릿과 
톰캣이 프레임워크로 봐도 된다. doGet같은걸 호출하는게 안보임
------------------------------------------------------------
-- 3일차 2교시 web.xml설정, DispatcherServlet --
web.xml 설정
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee;(여기에 세미콜론 넣으면 빨간줄 사라짐) https://java.sun.com/xml/ns/javaee/web-app_4_0.xsd">

listener에 대해 설명(ContextLoaderListener) 프로그램 로드 리스너. 톰캣이 최초 기동 될 때 
스프링이 사용하는 설정파일을 읽어들이는 것
리스너는 미리 등록한 약속된 작업을 해주는 것
톰캣이 web.xml 파싱 -> 리스너 실행 -> context-param을 가져간다(setContext~~) -> root-context.xml
안드로이드도 스프링으로 가능함.

스프링은 DispatcherServlet이 전면에 등장. 역할은 프론트컨트롤러인데 실제론 서블릿
p621 
1. if(command.equals("/BoardWriteAction.do")){
(이게 @GetMapping("/")이다.

2.	requestBoardWrite(request);( 이게 HomeController에서 String home()메서드이다.)

3.	RequestDispatcher rd = request.getRequestDispatcher("/BoardListAction.do");
	(이게 HomeController에서 return "index"; 부분이다)

	rd.forward(request, response);
}

DispatcherServlet은 위에 621이 제공하는것을 포함하고, 더 다양한 것을 제공한다.
appServlet의 servlet-context.xml이 핵심엔진

bean은 object이고 스프링이 사용하는 객체를 뜻한다.

servlet-context.xml의 <annotation-driven/>있는데 
이것은 @Controller가 마킹되어 있는 것(해당클래스)을
DispatcherServlet이 호출할 수 있게 하는 프로그램
@Controller가 빠지면 DispatcherServlet이 인식못함.
2~3(621 14~15줄)을 스프링에서는 자동으로 생성해주는 것이다.

root-context.xml은 데이터베이스 관련된 것을 설정하는 곳이다.
------------------------------------------------------------
-- 3일차 3교시 pom.xml설정, DB pool --
<load-on-startup>1</load-on-startup> 이거는 첫번째 요청한 사람도 딜레이없이 빠르게 응답받도록
요청~ 서블릿 이런 패턴을 여러개 만들 수 있다.
그 때 1이라고 하면 우선순위가 높은 것이다.
[pom.xml 수정한 것]
{
	<dependencies>
		<dependency>
			Spring TestContext Framework 5.2.16.RELEASE
			Spring JDBC 5.2.16.RELEASE
			Spring Transaction 5.2.16.RELEASE
			마이바티스 3.5.7
			마이바티스-spring 2.0.6
			Mysql Connector 8.0.26(DB연결 드라이버)
			com.zaxxer에 HikariCP 5.0.0
			Project Lombok 1.18.20
			Junit 4.12
			Apache commonsIO 2.11.0
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
		
			</plugin>
		</plugins>
	</build>
} 수정후에는 maven update project를 꼭 해줘라.
마이바티스(DB반복작업 도와주는 모듈, 스프링이랑 연동)
JPA
------------------------------------------------------------
-- 3일차 4교시 pom.xml설정, MVC패턴,lombok으로 get set 자동처리--
com.example.controller 패키지
 -> HomeController 이거 설명
순수클래스(POJO 플레인 올드 자바 오브젝트)

@Controller
@RequestMapping("/member/*")->주소에서 공통적인 경로를 class수준에서 정의할 수 있다.
public class MemberController{
	@GetMapping("join") ->이거는 .do랑 비슷한거
	public String join(){
	System.out.println("join 호출됨...");
	return "member/join";
	}	
} DispatcherServlet이 받아서 실행

topNavbar에서 a 태그의 회원가입 부분에서 .jsp 삭제
http://localhost:8090/member/join
주소표시줄로 요청하는 것은 Get방식이므로 @Getmapping 해줘야한다.

주소에서 공통적인 경로를 class수준에서 정의할 수 있다.
@RequestMapping("/member/*") -> 멤버뒤에 무언가 온다~

topNavbar에서 a 태그의 Home 부분 /index.jsp를 삭제하고 /만 남긴다.
topNavbar에서 a 태그의 android 부분 /index.jsp를 삭제하고 /만 남긴다.

join.jsp에서 input부분 name속성! 서버에서 값을 찾는 기준이된다. request객체로 
사용자데이터가 넘어올텐데, request.getParameter()로 꺼내쓰기했다. 

button type에 submit이 있으면 가장 가까운 form태그의 action을 요청한다.(submit request)
<form action = "/member/join" method="POST">

@Controller
@RequestMapping("/member/*")->주소에서 공통적인 경로를 class수준에서 정의할 수 있다.
public class MemberController{
	@GetMapping("join") ->이거는 .do랑 비슷한거
	public String join(){
	System.out.println("join 호출됨...");
	return "member/join";
	}	

	@PostMapping("join")
	public void join(String id){
		
	}
} DispatcherServlet이 받아서 실행

post는 용량제한이 없고, get은 200바이트정도제한

------------------------------------------------------------
-- 3일차 5교시 lombok으로 get set 자동처리 toString--
@Controller
@RequestMapping("/member/*")->주소에서 공통적인 경로를 class수준에서 정의할 수 있다.
public class MemberController{

	@GetMapping("join") ->이거는 .do랑 비슷한거
	public String join(){
	System.out.println("join 호출됨...");
	return "member/join";
	}	

	@PostMapping("join")
	public void join(String id){
		
	}
} DispatcherServlet이 받아서 실행

액션태그를 스프링이 자동으로 해준다.(규칙만 알면된다)

정적인것은 아파치가 해줄 수 있고
동적인 것은 톰캣이 받아서 DispatcherServlet이 받아서 코드를 호출

form태그에서 submit버튼에 의하여 데이터가 MemberController넘어오게 된다.

jsp 또는 서블릿이면 request가 기본내장객체로 준비되어 있다. 그래서 ..<% request.getParameter("id")%>
이렇게 처리 될 테지만~

스프링4버전이후 자바 리플렉션기술이 있기에 실행중에 확인 할 수 있다. 그래서결론은 name값만 써주면됨
@PostMapping("join")
public void join(HttpServletRequest request){ request.getParameter("id"); } 
DispatcherServlet아 이 request객체 주세요~ 이렇게 하는건 스프링방식은 아님.. 그냥 톰캣기반

@PostMapping("join")
public void join(String id, String passwd, String name){ id와 비밀번호는 문자열로 
	System.out.println("id : " + id);
	System.out.println("passwd : " + passwd);
	System.out.println("name : " + name);
} post요청에서는 한글이 깨진다.

Filter 처리하면 한글제대로 보임(web.xml)

	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

DB테이블과 관련된 정보를 자바입장에서는 객체형태로 준비했다가 insert문으로 DB에 넣을 것이다.
튜플을 담을 수 있는 VO클래스 또는 dto 정의 value object
VO: 데이터베이스 테이블관련
dto: 프로그램 내부적으로 데이터 모아서 이동시키는 용도
DB간에 대소문자로 인한 오류 소거하기 위해서 캐멀(낙타)표기법으로 하자

전체를 불러오려면 object에서 상속받는 toString을 자동으로~ 

@
package com.example.domain;

import java.util.Date;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

public class MemberVO {
	private String id;
	private String passwd;
	private String name;
	private String birthday;
	private String gender;
	private String email;
	private String recvEmail;
	private Date regDate;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getPasswd() {
		return passwd;
	}
	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getBirthday() {
		return birthday;
	}
	public void setBirthday(String birthday) {
		this.birthday = birthday;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getRecvEmail() {
		return recvEmail;
	}
	public void setRecvEmail(String recvEmail) {
		this.recvEmail = recvEmail;
	}
	public Date getRegDate() {
		return regDate;
	}
	public void setRegDate(Date regDate) {
		this.regDate = regDate;
	}
	@Override
	public String toString() {
		return "MemberVO [id=" + id + ", passwd=" + passwd + ", name=" + name + ", birthday=" + birthday + ", gender="
				+ gender + ", email=" + email + ", recvEmail=" + recvEmail + ", regDate=" + regDate + "]";
	}
	
}

------------------------------------------------------------
-- 3일차 6교시 java -jar lombok.jar 설치해야 아웃라인이 나온다, DI개념 설명(Car), 마이바티스 --
package com.example.domain;

import java.util.Date;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@AllArgsConstructor(모든 것을 나오게하는 생성자~)
@NoArgsConstructor
@Getter
@Setter
@ToString(모든 멤버변수)
public class MemberVO {
	private String id;
	private String passwd;
	private String name;
	private String birthday;
	private String gender;
	private String email;
	private String recvEmail;
	private Date regDate;

}

VO에 있는 멤버변수랑 form태그의 name값이랑 같게 설정해주자! 그래야 스프링이 자동으로 가능

@Controller
@RequestMapping("/member/*")->주소에서 공통적인 경로를 class수준에서 정의할 수 있다.
public class MemberController{

	@GetMapping("join") ->이거는 .do랑 비슷한거
	public String join(){
	System.out.println("join 호출됨...");
	return "member/join";
	}	

	@PostMapping("join")
	public void join(MemberVO memberVO){
		System.out.println(memberVO)
	}
} DispatcherServlet이 받아서 실행

get set 기본생성자 있으면 작동되는데, setter메서드의 
뒷부분setId이런거의 Id부분을 id로 고쳐서 스프링(DispatcherServlet)이 자동인식하고 처리함
작성일자는 시스템에서 만들어준다. 그러므로 7개가 설정하는 것
jdbc코드로 insert를 하면 스프링 쓰는 의미가 없으므로 마이바티스모듈을 이용하려고 한다.

대부분 포함관계이고
public class Car {
	private ToyotaEngine toyotaEngine;
}

repositoryDAO객체가 모델2에서 보드컨트롤러 안에 있었고,
보드컨트롤러가 단독으로 처리할 수 없고, repositoryDAO와 협력하여 같이 처리한다.
제대로된 DB연동을 위하여~ 의존하고 있다... 자동차와 엔진관계 또는 스마트폰과 배터리관계



------------------------------------------------------------
-- 3일차 7교시 DI개념 설명(Car)  --
interface Engine{ 엔진제조업체들은 이 인터페이스를 따른다.
	void start();
}

class HyundaiEngine implement Engine{
	@Override
	public void start() {
	System.out.println("현대 엔진이 동작: 부릉부릉~");
}

업캐스팅: Engine engine = new ToyotaEngine(); 엔진이 상위 도요타엔진이 하위

우리의 목표는 엔진이 바뀌더라도 Car class는 전혀 손대지 않아도 되게끔 하는 것

외부에서 new하기

class Car {
	private Engine engine;

	public Car(Engine engine){
	super();
	this.engine = engine;

	public void setEngine(Engine engine){
	this.engine = engine;
	}

	public void drive(){
	engine.start();
	}
}


public static void main(String[] args){
	Engine engine = new ToyotaEngine();

	Car car = new Car(engine); 자동차가 엔진을 의존한다. 의존관계 주입을 수동으로 했다.
	car.drive();

	engine = FordEngine();
	car.setEngine(engine);

	car.setEngine(new HyundaiEngine());
	car.drive();
}


DB설정은 root-context.xml에서 설정해준다.
스프링이 관리하는객체를 beans라고 한다.
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
			<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
			<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/jspdb?useUnicode=true&amp;characterEncoding=utf8&amp;allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=Asia/Seoul" />
			<property name="username" value="jspid" />
			<property name="password" value="jsppass" />
		</bean>
Mysql 네이버카페젠코딩에서 jdbcUrl 복사
&이거를 &amp; 요렇게 고치기
------------------------------------------------------------
-- 4일차 1교시 Car와 Engine 설명(포함관계와 DI개념,@Component), JUnit테스트방법--
DispatcherServlet에게 모든 것을 결재받아야 한다.
클래스 만들 때 Add해서 인터페이스 넣기가능

root-context의 Namespace에서 bean, context, mybatis, tx 체크

@Component 마크와 스캔
root-context.xml에서 <context:component-scan base-package = "com.example.sample" />
의존관계 주입하는 거는 @Autowired로 해준다.(Car car = new Car(engine);이런거)
@Autowired
public Car(Engine engine){
	this.engine = engine;
}
src/test/java
com.example.sample 패키지 생성
SampleTests 클래스 를 만들고, 테스트 진행 할 것
@Component 스프링빈 표시(카, 현대엔진 마킹했다면 둘다 객체가 준비가 될것이다.)
생성자에 박으면, 순서도 스프링이 자동으로 해준다.

@Autowired 는 타입을 기준으로 스프링빈 안에서 의존객체를 찾아서 주입해준다.
root-context.xml에서
<context:component-scan base-package="com.example.sample" />

@RunWith(SpringJUnit4ClassRunner.class)//@Component 계열 애노테이션에 해당함
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
이걸 해주면 JUnit테스트 가능
------------------------------------------------------------
-- 4일차 2교시 스프링에서 어노테이션작동원리(Car와 현대엔진), 맵컬렉션--
pom.xml에서 Junit버전을 4.12
assertNotNull(여기에 널이 아니면 테스트 통과)
root-context.xml에서
<context:component-scan base-package="com.example.sample" />
root에서 스캔한 것만 스프링이 인식
애너테이션 관련 프로그램 발전으로 일일이 <bean>안해도 된다.
setter를 통해서는 Autowired 필수
생성자 통해서 할 때는 Autowired 생략가능
Map<String, Object> map = new HashMap<String, Object>();
	@Test
	public void testMap() {
		Map<String, Car> map = new HashMap<String, Car>();
		//키로 제일많이 쓰는 건 String이고, 값으로 Object많이 씀
		map.put("현대자동차", new Car(new HyundaiEngine()));
		map.put("포드자동차", new Car(new FordEngine()));
		Car hyundaiCar = map.get("현대자동차");
		hyundaiCar.drive();
		
		Car FordCar = map.get("포드자동차");
		FordCar.drive();
				
	}
------------------------------------------------------------
-- 4일차 3교시 --
1. @Component 2. @Autowired 3. root-context.xml에서 <context:component-scan base-package="com.example.sample" />
map컬렉션에서 put의 키가 중복되는 경우: 수정하는 것

<!-- @Component랑 용도가 같은 bean! -->
root-context.xml에서 히카리 설명은 스킵(14분경)..
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
			<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
			<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/jspdb?useUnicode=true&amp;characterEncoding=utf8&amp;allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=Asia/Seoul" />
			<property name="username" value="jspid" />
			<property name="password" value="jsppass" />
		</bean>
		
		<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
			<constructor-arg ref="hikariConfig" />
		</bean>
닫아주는 거 destroy-method="close"
스프링에서 일일이 bean설정 해줬던 때 설명
커넥션 풀 준비 끝
mybatis-config.xml은 src/main/resources폴더에 만든다.
구글에서 mybatis공식사이트에서 시작하기
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<settings>
		<!-- DB에서 데이터 조회 또는 삽입 등에서 null값 허용 -->
		<setting name="jdbcTypeForNull" value="NULL"/>
		<setting name="callSettersOnNulls" value="true"/>
		
		<!-- 동일한 select문이 또 요청되면 기존 캐시된 내용으로 가져옴. 속도향상 -->
		<setting name="cacheEnabled" value="true"/>
		
		<!-- 테이블의 컬럼명과 VO객체의 setter명 연결 규칙 설정 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>
	
	<typeAliases>
		<package name="com.example.domain" />
	</typeAliases>
	
</configuration>

------------------------------------------------------------
-- 4일차 4교시 마이바이트설정, DB연동--
MemberMapper 인터페이스 생성
문장 붙일 때 + 앞에서 띄어주든 뒤에서 띄어주든 한칸은 띄어야함
pstmt = c.prepareStatement("INSERT INTO" + tblname + " VALUES("?,?,?,?")");
이것처럼 VALUES(#{id}, #{passwd}, #{name}, #{birthday}, #{gender}, #{email}, #{recvEmail}, #{regDate}), (), (), (), () ")
namespace 마이바티스 선택해줌
<mybatis-spring:scan base-package="com.example.mapper" />

MemberController에서 @PostMapping
//연월일 구분문자("-" 제거하기)
		String birthday = memberVO.getBirthday(); // "2021-08-25"
		birthday = birthday.replace("-", ""); // "20210825"
		memberVO.setBirthday(birthday);
------------------------------------------------------------
-- 4일차 5교시 회원가입 리다이렉트--
@Post로 보낼 때 회원가입 완료하고 로그인화면이 나오지만 주소창에 member/join나오는 이슈가 있다.
이 때 사용자가 새로고침을 누르면 한번더 작성내용 제출하게되는데, 보안상 좋지 않다.게다가 DB기본키제약 때문에 오류뜬다.
유니크제약조건만 하면 널 허용 // PK(프라이머리키) 는 널도 안되고 중복도안됨
그래서 
return "redirect:/member/login";
자바스크립트로는 location.href = '/'

그런데 리다이렉트를 바로 리턴하면 alert같은 창을 못띄우게된다.
그러므로 스프링방식으로 리다이렉트하는 방법을 익혀두자
자바스크립트가 담긴 html조각코드를 주려고 한다.
public ResponseEntity<String>

HttpHeaders headers = new HttpHeaders();
headers.add("Content-Type", "text/html; charset=UTF-8");어떠한 컨텐트 타입인지 미디어타입	
String str = Script.href("회원가입 성공!", "/member/login");	

return new ResponseEntity<String>(str, headers, HttpStatus.OK);
				문자열, 헤더정보, 응답코드(상수 200정상)

------------------------------------------------------------
-- 4일차 6교시 ResponseEntity사용법, 비밀번호 암호화 --
return new ResponseEntity<String>(str, headers, HttpStatus.OK);
				문자열, 헤더정보, 응답코드(상수 200정상)
자주쓰는 패턴 별도의 클래스로만들기
com.example.util패키지에 Script.java 클래스로 만든다.
메서드 바로 호출 할 수 있드록 static처리
package com.example.util;

public class Script {

	public static String href(String alertMessage, String locationPath) {
		//sb.setLength(0);//StringBuilder 현재 내용 비우기
		StringBuilder sb = new StringBuilder();
		sb.append("<script>");
		sb.append("alert('" + alertMessage + "');");
		sb.append("location.href = '" + locationPath + "';");
		sb.append("</script>");
		
		return sb.toString();
	}
	
	public static String back(String alertMessage) {
		StringBuilder sb = new StringBuilder();
		sb.setLength(0);//StringBuilder 현재 내용 비우기 만약 버퍼를 안지우면?
		
		sb.append("<script>");
		sb.append("alert('" + alertMessage + "');");
		sb.append("history.back();");//뒤로가기
		sb.append("</script>");
		
		return sb.toString();
	}
}

	// 비밀번호 암호화 하기
		String passwd = memberVO.getPasswd();
		String hasedPw = BCrypt.hashpw(passwd, BCrypt.gensalt()); // 암호화된 비밀번호 리턴받음
		memberVO.setPasswd(hasedPw); // 암호화된 비밀번호로 재설정
------------------------------------------------------------
-- 4일차 7교시 트랜잭션을 위해 서비스클래스 사용--
public class MemberService {
	
	private MemberMapper memberMapper;
	//생성자로 하지 않으면 스프링에서만 읽을 수 있다. 다른곳 불가능
	//생성자에서는 @Autowired 생략가능
	public MemberService(MemberMapper memberMapper) {
		super();
		this.memberMapper = memberMapper;
	}
}
DataSource는 커넥션풀 제공
root-context에 <context:component-scan base-package="com.example.service" />
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
			<property name="dataSource" ref="dataSource" />
		</bean>
TransactionManager가 DataSource를 알아야한다.
커넥션 객체.커밋이라는 게 있다. con.commit(); 이런거
bean의 id를 TransactionManager를 꼭 넣어줘야하고 DispatcherServlet이 찾는다.
네임스페이스에서 tx를 체크해준다.
<tx:annotation-driven/>

	public void register(MemberVO memberVO) {
		memberMapper.insert(memberVO);
	}
실제로 서비스가 직접일을 못하고 맵퍼가 있는데,
서비스가 컨트롤러한테 내가 했다~
------------------------------------------------------------
-- 5일차 1교시 마이바티스데이터베이스 연동--
<!-- 테이블의 컬럼명과 VO객체의 setter명 연결 규칙 설정 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
------------------------------------------------------------
-- 5일차 2교시 --
------------------------------------------------------------
-- 5일차 3교시 --
------------------------------------------------------------
-- 5일차 4교시 --
------------------------------------------------------------
-- 5일차 5교시 --
------------------------------------------------------------
-- 5일차 6교시 --
------------------------------------------------------------
-- 5일차 7교시 --
------------------------------------------------------------
-- 6일차 1교시 --
------------------------------------------------------------
-- 6일차 2교시 --
------------------------------------------------------------
-- 6일차 3교시 --
------------------------------------------------------------
-- 6일차 4교시 --
------------------------------------------------------------
-- 6일차 5교시 --
------------------------------------------------------------
-- 6일차 6교시 --
------------------------------------------------------------
-- 6일차 7교시 --
------------------------------------------------------------
-- 7일차 1교시 게시판 글목록 페이징--
스크롤바
내리면 덧붙이는 방식
자바스크립트 방식으로 AJAX해야하는데 REST API방식으로 해야한다.

현재 우리는 서버쪽에서 렌더링 해주는 방식으로 쓰고 있는 중이다.

데이터는 Mysql에서 가져옴

LIMIT 몇번째 행부터 몇 개

페이지번호를 추가하면서 

페이지블록(페이지네이션)

인터페이스로 처리 하기때문에 버전바껴도 스프링이 알아서 해줌
integer.parseINt("2") 이런 과정도 스프링이 자동으로 해줌
그러므로 
@Controller
@RequestMapping("/board/*")
public class BoardController {
	@Autowired
	private BoardService boardService;
	
	@GetMapping("/list")
	public String list(int pageNum, int amount, Model model) { ->> 이부분은 Criteria criteria로 
		System.out.println("list 호출...");
		
		List<BoardVO> boardList = boardService.getBoards();
		
		int totalCount = boardService.getTotalCount(); //전체 글 개수
		//뷰에서 사용할 데이터를 Model 객체에 저장 - > requestScope로 옮겨줌
		model.addAttribute("boardList", boardList);
		model.addAttribute("totalCount", totalCount);
		
		return "board/boardList";
	}
	
}

pageNum과 amount를 domain으로 따로 관리하자
Criteria 클래스(조건관련된)

default설정 요청할 때 페이지번호 안넘어오면 1페이지로 기본
@Getter
@Setter
@ToString
public class Criteria {
	private int pageNum;
	private int amount;
	
	public Criteria() {
		this(1, 10);//기본값은 1페이지, 한페이지당 10개 글
	}

	public Criteria(int pageNum, int amount) {
		super();
		this.pageNum = pageNum;
		this.amount = amount;
	}
------------------------------------------------------------
-- 7일차2교시 paging, BoardMapper.xml, 페이지네이션 5개정도씩 끊어서 작성--

	[BoardMapper.xml]작성내용
	<select id="getBoardsWithPaging" resultType="com.example.domain.BoardVO">
	<![CDATA[
		SELECT * FROM board ORDER BY re_ref DESC LIMIT #{startRow}, #{amount}
	]]>
	</select>

pageDTO작성

페이지네이션
끝페이지부터 5개 노출


------------------------------------------------------------
-- 7일차3교시 paging, BoardMapper.xml, 페이지네이션 5개정도씩 끊어서 작성--
시작페이지와 끝페이지 알고리즘
endPage = (int)Math.ceil( (double)cri.getPageNum() / PAGE_BLOCK);
startPage = endPage


request스코프 생략내용 놓침...
<c:when test="${ pageMaker gt 0}">

<c:forEach var="" begin="${ pageMaker.startPage }" end="${ pageMaker.endPage }" step="1">
</c:forEach>

EL언어에서 ==는 eq이랑 같은 의미이다.

------------------------------------------------------------
-- 7일차4교시 paging, 페이지네이션 활성 비활성--
페이지네이션 활성 비활성
이전을 활성 비활성하는 거
JSTL c태그 복습하기
작성한 거: pageDTO, boardlist

------------------------------------------------------------
-- 7일차5교시 새글쓰기, 글 상세보기 --
it 필수로 갖춰야하는 점: 자기만의 취미생활
책임감이 너무 강하고 성실한 사람은 번아웃이 올 수 있다.

session 스코프~ 되는 거 기억해두고

session
가상으로 정적인것처럼 content.html 이런식으로 눈속임 할 수 있다. 물리주소는 아니다 .do


------------------------------------------------------------
-- 7일차6교시 게시글 상세보기, 글목록 세션처리보다는 request영역객체--
줄바꿈 문자 \n 
pre태그 쓰면 제일 쉽다
<pre>${ board ~~}</pre> 이거는 css로 글꼴 재지정해줘야한다.
onclick으로 한다는 것은 자바스크립트로 처리하는 것이다.
onclick = "location.href = '/board/boardList.jsp';"
글목록 누르면 좀전의 페이지네이션으로 돌아간다.
쿠키랑 비슷한 처리방식으로 했다.


------------------------------------------------------------
-- 7일차7교시 @ModelAttribute("pageNum")설명 --
답글쓰기(로그인한 사람만) 글삭제(글쓴이아이디와 동일) 글수정(글쓴이와 동일)
글쓴이와 같다는 것은 세션의 내용으로 알 수 있다.
requestScope생략 가능
새글쓰기 눌렀을 때 boardwrite
스프링 파일업로드 multipart
스프링은 cos방식과 다른 라이브러리를 받아들였다.
------------------------------------------------------------
-- 7일차8교시 @ModelAttribute설명 --
쿼리파라미터??
쿼리스트링
키 값
EL언어로

서버에 쿼리를 날리다.

C#이 자바를 벤치마킹해서 만들었다.

유니티, 언리얼

유니티는 C#언어로 돌아간다.
자바는 업무용
마인크래프트 자바
C#으로 포팅

------------------------------------------------------------
-- 8일차 1교시 검색--
게시글 기준으로 검색
셀렉트와 인풋이 폼태그에 묶어있다.
요청주소가 글목록이다. 보드컨트롤러 
검색할 땐 get으로 하게된다. 주소창에 검색어가 나와도 특별히 문제될게 없고 즐겨찾기할 때에도 주소창그대로저장
Criteria에서 같이 하자

제목, 내용, 작성자 별로 분기처리 할 수 도 있는데, 불편하니깐
java코드로 sql문을 검색조건에 따라서 WHERE조건절을 조금씩 바꾼다.
동적sql문 실행중에 내용이 결정된다 (마이바티스가 지원해준다)
정적sql문 미리 정해져있다.
BoardMapper.xml 작성
jsp c태그와 비슷

검색어가 있을 때만 WHERE

c태그 if 있지만, choose 쓰는 경우도 있다.
------------------------------------------------------------
-- 8일차 2교시 BoardMapper.xml, 보드서비스, 보드 매퍼.java,보드컨트롤러--
CDATA안에 .toString()
disabled selected 있을땐 다른곳에 selected가 우선적 표현
pageMaker부분 복습하기.
EL언어에서 +=가 문자열 연결이다.
검색후에도 내가 검색한거 그대로 남도록
DB에서 작성자 이름을 바꿔서 실행해봄
------------------------------------------------------------
-- 8일차 3교시 파일업로드 썸네일 이미지, jQuery사용(40분정도부터) --
주소창 뒤에 #board 찍어주면 id가 board인지점부터 시작한다.
actio="/board/list?#board"
파일업로드 서블릿버전이 3버전이후로는 자동
HTTP서블릿은 WAS서버가 실행해주는 객체?? 이부분 다시 듣기
thumbnailator를 검색
첨부파일을 업로드한 횟수만큼 화면에 보여주기
파일 박스만들기

<script>
	var a = function(){};
	a();
	$('#btnAddFile')
</script>
------------------------------------------------------------
-- 8일차 4교시 파일업로드 첨부파일 여러개 --
자바스크립트만의 문법 백틱``
let 지역변수개념 19분동영상
var(자신을 감싸는 가장가까운 함수만 닫기)
var a = 10;

삭제할 때 이슈가 있다. 28분 그냥 파일추가만 했을 때 삭제가 안됨.
정적이벤트 연결 vs 동적 이벤트연결
jQuery가 동적이벤트연결인거 자동으로 해주는 기능이 있다.
매개변수3개이면 jQuery 동적이벤트연결
jQuery에서는 $(this).closest('div').remove(); 사용해서 간결하게
remove()와 empty()는 다르다.
$(this).parent().remove();

fileCount --;

mutiple하면 파일 여러개 선택가능(한 폴더안에서)
------------------------------------------------------------
-- 8일차 5교시 파일업로드 --
인천 영종도 취업많음
파일업로드는 서블릿 3버전이상이면 라이브러리에 포함되어있다.
DispatcherServlet이 
백슬러시 두번을 쓰던가, 슬러시써라
원래는 주소를 C:/ksw/upload/temp 
ERP 첨부파일 제약안뒀더니 압축 몇십기가에 프로그램 다운
<!-- 파일 업로드 관련 설정 -->
<multipart-config>
<location>C:/Dev_jun/upload/temp</location><!-- 업로드된 파일이 위치할 임시경로 -->
<file-size-threshold>10485760</file-size-threshold><!-- 임시파일 사용기준크기를 바이트단위로 설정,1024*1024*10(10메가) -->
<max-file-size>314572800</max-file-size><!-- 한개 파일당 최대 업로드 크기(바이트단위) 300메가 -->
<max-request-size>629145600</max-request-size><!-- 모든 파일 합쳐서 총 업로드 허용 크기(바이트) 600메가 -->
</multipart-config>
------------------------------------------------------------
-- 8일차 6교시 파일업로드 한 라인에서 여러개파일--
파일 한개만 보내는 경우 public void write(MultipartFile files){
	
}
파일 여러개는 배열
public void write(List<MultipartFile> files){
	

}
한폴더에 너무 많은 파일은 성능저하의 요인이된다.
하루하루 새 폴더 자동생성
연도 월 일 폴더를 각각 만들어준다.
UUID 
파일입출력 예외처리를 스프링이 할 수 있다.throws IOException


------------------------------------------------------------
-- 8일차 7교시 파일업로드 --
썸네일 이미지
보드컨트롤러

------------------------------------------------------------
-- 8일차 8교시 파일업로드 --
AttachMapper에서 xml에서 하는거 바로한다? 13분
https://mybatis.org/mybatis-3/ko/configuration.html#typeAliases
aliases List는 list
게시글 올릴 때 트랜잭션 이슈: 사진과 게시글을 한 작업으로 묶기

------------------------------------------------------------
-- 9일차 1교시 --
메서드 시그니처와 함께붙는 애너테이션등을 스프링이 자동으로
foreach에서 open close는 전체로 하는거다. 우리는 안넣는다.
15분 내용 신입인데 대단한걸?? 내용 복습
127.0.0.1 이건 가상주소
나의 주소는 ipv4 ipconfig로 볼 수 있다.

문서화하는 능력 파워포인트


------------------------------------------------------------
-- 9일차 2교시 파일업로드 --

------------------------------------------------------------
-- 9일차 3교시 파일첨부된거 상세내용에서 표현--
Apache commonsIO 2.11.0
이미지까지 가져오는게 아니고, 문서만 가져오고
이미지는 src로 이미지 요청하고
서버가 이미지도 보내줌
------------------------------------------------------------
-- 9일차 4교시 파일첨부 다운로드--
APPLICATION_OCTET_STREAM_VALUE

Resource resource = new FileSystemResource(file);
String downloadFilename = new String(filename.getBytes("UTF-8"), "ISO-8859-1");
ISO-8859-1
HttpHeaders headers = new HttpHeaders();
headers.add("Content-Disposition", "attachment
UUID
encodeURIComponent(생활코딩) 자바스크립트 동영상 39분 쯤
파일이름이 이상하게 나오는 현상 고치기
<a href="javascript:location.href = '/download?fileName=' + encodeURIComponent(${ fileCallPath }"> 이부분은 수정할 것


------------------------------------------------------------
-- 9일차 5교시 4교시의 문제해결, 권한문제, 주변부로직 횡단관심사40분 cross concerns--
substring
콘솔창에서는 유니코드가 잘보이는데, iso-8859-1은 콘솔창에서 깨진다.
jsp 과제
프로그램을 아는 사람이면 대충 주소를쳐서 아무곳에 드간다(글쓰기 아무렇게나)(보안취약성)
로그아웃도 로그인을 확인하는 절차
주변부 로직

인터셉터로 쿠키~ 자동로그인
------------------------------------------------------------
-- 9일차 6교시 로그인 보안이슈해결 --
로그인 보안
회원정보수정 회원정보탈퇴
------------------------------------------------------------
-- 9일차 7교시 인터셉터 --
------------------------------------------------------------
-- 9일차 8교시 자습 --

------------------------------------------------------------
-- 10일차 1교시 주변부 3대장 --
필터(스프링은 아님) 인터셉터 AOP
Servlet Request, Servlet Response 톰캣이 필터부터 호출한다.
스프링모듈이 
엔진주변에 중요한 부품들 controller 
controller 웹모듈
root-context 맵퍼 데이터베이스모듈
스프링 프레임워크의 특징 3가지 DI(포함관계), AOP가 주요로직에 안보이게, 서비스추상화(확장성좋다) 
aspectj위버를 준비해라.aspectjweaver 1.6.10
몇 밀리초가 뜨는지 성능측정할 때 long beginTime = System.currentTimeMillis();
	// 회원가입하기
	public void register(MemberVO memberVO) {
		long beginTime = System.currentTimeMillis();
		
		memberMapper.insert(memberVO);
		
		long endTime = System.currentTimeMillis();
		
		long diff = endTime - beginTime;
	}
	일일이 beginTime 이런걸 다 적어줘야한다.
------------------------------------------------------------
-- 10일차 2교시 AOP --
AOP fancy한 용어 단계적 접근 여러개 해결하기어려운 문제때문에
주변부 로직(공통 기능)을 분리해서 개발하는 방식
스프링은 AOP기능을 타겟 메소드 호출 기준으로 주요 로직에 주변부 로직을 결합시켜줌
까메오
- Advice: 주변부 로직(공통기능)을 가진 클래스
- Target: 주요 로직을 가지고 있는, 주변부 로직이 적용될 대상 오브젝트
- Join Point: 주변부 로직이 적용될 수 있는 메소드 후보들
- Point Cut: 카메오가 들어나는 시점, 조인포인트(후보)들 중에 실제 결합시킬 메소드를 말함
스캔이 일어나도록 root-context설정하기
name스페이스 AOP체크
메서드 시그니처: 리턴타입 메소드명 (매개변수 형식)
*(..)매개변수 상관없다.자료형관계없이

------------------------------------------------------------
-- 10일차 3교시 LogAdvice.java --
속여서 들어온다 27분
memberservice에서는 주변부 사용할것이라고 생각도 못한다. 안보여서
글삭제할 때 파일삭제
------------------------------------------------------------
-- 10일차 4교시 게시판 글삭제, 글수정 --
배치처리(일괄)
on으로 시작하는게 있으면 전부 자바스크립트로 이게 실제로 작동원리는 function() { }이렇게 바뀐다. 12분
onclick="remove()"이런건 바로해도됨
onclick="remove(event);"이벤트 얘기할땐 무조건 event event객체 안받을거면 생략해도됨
	<script>
		function remove(event){
			
		}
	</script>
요청하는 a태그 폼태그 기능안하게 하려면
이벤트 소스(이벤트 발생 오브젝트)의 기본동작을 못하게 한다.
기본동작을 가진 대표적인 두 태그: a태그(클릭못하게) form태그(submit 못하게)
event.preventDefault();
------------------------------------------------------------
-- 10일차 5교시  --
보드컨트롤러
보드서비스에 딜리드만들기
보드매퍼xml 딜리트해보자
글삭제 업무단위라 할 수 있고, 테이블 2개 관련되어있다.
@Transactional AOP와 일맥상통 17분동영상 주변부 로직
return "redirect:/board/list?pageNum=" + pageNum"
파일업로드 글쓰기하고나서 상세보기하려고 리다이렉트하는거 rttr.attributes
update텍스트내용
추가,삭제 파일첨부된거

uuid
------------------------------------------------------------
-- 10일차 6교시  --
commons io 2.11.0 이고
글수정할 때 boardModify.jsp에서 value로는 여러줄 표현 어려움 19분
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%> 이걸로 첨부파일 자바스크립트
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%> 이건 필요없음
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%> 개수 세려고

<c:forEach var="attach" items="${ attachList }">
<input type="hidden" name="oldfile" value="${ attach.uuid }">
<div>
<span>${ attach.filename }</span>
<button type="button" class="btn btn-primary btn-sm delete-oldfile">
<i class="material-icons align-middle">clear</i>
<span class="align-middle">삭제</span>
</button>
</div>
</c:forEach>
------------------------------------------------------------
-- 10일차 7교시  --
중간확인 HRD
boardModify.jsp에
JQuery로 처리 
prev()
jQuery는 반복처리에 효과적이다.
jQuery는 반복문을 내부적으로 해준다.$ on 
서버 프론트앤드 연동이라 리액트까지는 무리
자바스크립트
jQuery 선택자 어쩌구어쩌구
vuejs가 진입장벽이 낮다.
리액트 VS vue.js
jsp책에 18장 스프링만 적용? 다른거 해도 됨
------------------------------------------------------------
-- 11일차 1교시  --
로컬데이터
백틱`` 안에서 자바스크립트 출력
boardModify.jsp에서 설명 동영상 18분정도
백틱은 문자를 한덩어리로 표현하려고 하는 것이다.
\${ a } 이거 jsp EL언어 또는 자바스크립트랑 겹친다. 백슬러시만 써주면 자바스크립트로 써진다.

@PostMapping("/modify")
	public void modify(List<MultipartFile> files, BoardVO boardVO) {
		//1) 파일업로드
		//2) 삭제할 첨부파일 삭제하기(썸네일 이미지도 삭제)
		//3) board 테이블 글 수정(update) boardVO준비해서 신규리스트, 삭제리스트와 함께
		//테이블 글 수정을 트랜잭션 단위로 처리
		//modify
------------------------------------------------------------
-- 11일차 2교시  --
@PostMapping("/write")
List<AttachVO> attachList = makeFilesAndGetAttachList();
3분에 리턴받는 방식과 vs 리턴아닌 방식 3번째는 비어있는거
16분 삭제하는 거 배울만한거~~~ 다시 복습하기
MySQL IN에 대하여 29분까지
AttachMapper에 List<AttachVO>작성

------------------------------------------------------------
-- 11일차 3교시  --
보드 컨트롤러 설명
동영상 24분 어려운부분. 모아서 보내냐 따로따로 한개씩 보내냐차이?
수정하기 완성~
------------------------------------------------------------
-- 11일차 4교시  --

조인, 마이바티스로
사용자요청이 없어도 스케쥴에 따라서 동작하는거 REST api
------------------------------------------------------------
-- 11일차 5교시 답글쓰기 --
보드컨텐트 상세보기 
답글만드는 원리 설명
레벨은 화면만들기
re_seq
똑같은 레벨의 답글을 최신순서로
나머지 re_seq를 +1 이거를 UPDATE SET
reply가 모델주세요 addAttribute("reRef",reRef) 이런 패턴 애너테이션방식도 있음
그게바로 @ModelAttribute("reRef")
------------------------------------------------------------
-- 11일차 6교시  --
답글쓰기 위치관련 작업
매개변수가 2개 이상일 경우  19분 2개이상은 안된다.

------------------------------------------------------------
-- 11일차 7교시 답글쓰기, SQL LEFT OUTER조인 --
답글
<span style="display: inline-block; width: ${ board.reLev * 15 }px"></span>
inline - block은 배치는 inline 크기는 block

SQL JOIN 1대1 관계 :private AttachVO attachVO
SQL JOIN 1대다관계 :List<AttachVO> attachList
마이바티스가 자동으로 해준다.


------------------------------------------------------------
-- 12일차 1교시 --
마이바티스 조인 만들 줄 알면 좋다.
조인안쓰고 가져오기 18분 vs 조인쓰고 가져오기 18분
맵을 이용하는건 안좋은거 같다 20분
BoardVO boardVO = boardService.getBoardAndAttaches(num);
25분정도 소리문제로 약간 짤림

Quartz라이브러리 자바진영 서버프로그램 정보처리기사 1번 스케쥴러
Quartz잡스도 필요

배치처리
Quartz cron표현식
------------------------------------------------------------
-- 12일차 2교시 배치처리, @Scheduled(cron = "") --
@Component
FileCheckTask
WEB-INF 스프링에 루트컨텍스트xml에서 배치처리
컴포넌트 스캔
<context:component-scan base-package="com.example.task" />
@Scheduled(cron="0 * * * * ?") //매분 마다
public void checkFiles() throws Exception{
	
}
네임스페이스 task 추가
<task:annotation-driven />
Quartz표현식 7개 동영상 15분 스케쥴
Seconds
Minutes
Hours
... 연도는 옵션

------------------------------------------------------------
-- 12일차 3교시 --
Calendar cal = calendar.getInstance();
9월 3일자 파일 여러개 있는거
SELECT * FROM attach WHERE uploadpath = '2021/09/03';
------------------------------------------------------------
-- 12일차 3교시 --
예약프로그램(쿼츠)















------------------------------------------------------------
-- 12일차 4교시 --
REST API(12시 30분)
Json??
NHN
REST API
클라이언트가 웹브라우저만 있는게 아니다.
스윙 GUI 자바 HTTPurl 특정URL 접속
자바 코틀린 스위프트( 이기종이다)

모바일은 데이터를 최대한 절약해야한다. 
xml을 대체할 자바스크립트 객체 표기법 JSON { }기본오브젝트 [ ]배열
{}이거는 맵컬렉션과 VO에 가깝다, []이거는
key리스트 어렵다 하나하나 반복문 써줘야하고 불편




------------------------------------------------------------
-- 12일차 5교시 --

HTTP 그대로
NHN 웹서버가 중간에 껴서 사물이 직접 DB에 접속하는게 아님
웹 오피스 이런게 REST방식
렌더링을 jsp 서블릿 서버기술이고
스프링에서는 REST에너테이션
jackson-databind 라이브러리가 필요하다. 스프링연동 라이브러리
jackson-dataformat은 xml도 쓰고 싶을 때
gson은 직접 수동으로 하고싶을 때
webapp에 
			@RestController 이 컨트롤러의 모든 메소드의 리턴값이 기존에는 jsp등이였는데, JSON 또는 XML로 응답
			@RequestMapping("/api/members/*")
컨트롤러를 새로 만든다 

@RestController 이 컨트롤러의 모든 메소드의 리턴값이 기존에는 jsp등이였는데, JSON 또는 XML로 응답
@RequestMapping("/api/members/*")
MemberRestController{
	
	@Autowired
	private MemberService memberService;
						produces가 json 타입으로 만든다. 두 개 다주면 XML 뒤에 .json 붙이면 json으로 온다.
	@GetMapping(value = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}) 이건 마음대로 /api/members/user1
	public MemberVO getOne(@PathVariable("mid") String id){
		
		MemberVO memberVO = memberService.getMemberById(id);

		return memberVO;
	}
	
}
	insert 이런게 들어나면 안된다
테스트
Routes
rest에서는 쿼리스트링 안쓰고  /members?id = user1
안드로이드앱 DB서버와 연동하려면 REST 서버 준비해놔야한다.

 구글 웹스토어에서 json

@GetMapping(value = "/{id}", produces = { MediaType.APPLICATION_JSON_VALUE}) value 무조건

------------------------------------------------------------
-- 12일차 6교시 --

개발자모드 - 네트워크

ResponseEntity<MemberVO> getOne(@PathVariable("id") String id)
500번에러

응답코드랑 매핑을 해줘야 나중에 문제찾기 쉬움
HttpURLConnection
Volley같은거
Retrofit2 
무조건 컨트롤러 거쳐야
jquery
ajax({
  url: '/api/members/' + id + '.json', 
})



------------------------------------------------------------
-- 12일차 7교시 --
동기처리, alert함수는 안누르면 그다음으로 안넘어간다.
비동기처리, 
async: false 그냥 넘어간다.
자바스크립트는 전부 비동기처리.

분신술

진동벨


------------------------------------------------------------
-- 13일차 1교시 --
ppt 33쪽 json 나온다.

자습

첨부파일 업로드
------------------------------------------------------------
-- 13일차 2교시 --
MemberRestcontroller 
http://localhost:[포트번호]/ajax/selectOneMember.jsp
http://localhost:[포트번호]/ajax/selectAllMembers.jsp
jquery
json
ajax 

REST API는 개념을 잘잡아야하고, 안드로이드 연동이슈 매우 중요
GET방식으로 멤버 불러오기 했다. 

기존의 @PostMapping(value="/members") 이런부분을
REST방식으로 변경해보기
https://jsonplaceholder.typicode.com/ << 주소양식
Get방식은 header body영역
동영상 37분부터 매우 중요한 부분
json 바디
@RequestBody MemberVO
gson.fromJson(~~~) 이 작업도 스프링이 자동화 해준다
직렬화: 납작한 종이에 써지는 느낌 41분 쿼리스트링으로 하느냐 안하느냐
------------------------------------------------------------
-- 13일차 3교시 ajax 요청--
http
<form>태그에서 action 쓸 필요가 없이 id만 적어
MemberVO랑 일치시킨다.
일반타입 버튼
$('form#frm')폼태그에 아이디 frm jquery
serialize()함수
쿼리스트링: 네임속성 쿼리속성
근데 쿼리스트링 보낼게 아니다. @RequestBody를 쓰면안됨
젠코딩카페 jQery에서 ajax 사용하기 serializeObject 라이브러리 다운로드하기
선언하기
<script src="/resources/js/jquery.serializeObject"
let obj = $(this).serializeObject();
console.log(typeof obj);
console.log(obj);

------------------------------------------------------------
-- 13일차 4교시 --
json은 문자열형식에서는 메소드 안되고, 콜론앞에 큰따움표로
자바스크립트에 JSON.stringify(obj) 
.json으로 하면 제이슨, 없으면 xml로됨
...
data: strJson;

...
$(this)는 어디에 있느냐에 따라 부모가 다름15분

jquery를 통해서 리턴받은 값을 $frm으로 붙여주는게 관례이다. 18분
/ajax/insertMember.jsp 특이한 이슈 21분
application/json 이거 복사 27분
delete 매핑작업
HttpStatus.INTERNAL_SERVER_ERROR 500번에러
HttpStatus.BAD_GATEWAY 502번 외부에서 전달받은 값이 잘못되어 오류가 발생한 경우
INTERNAL_SERVER_ERRO 500번 외부에서 온건 문제 없고 서버내부로직 문제로 오류가 발생

@DeleteMapping(value="/members/{id}", produces = MediaType.TEXT_PLAIN_VALUE)
public ResponseEntity<String> void remove(@PathVariable("id") String id{

}
------------------------------------------------------------
-- 13일차 5교시 --
회원삭제작업
25분
consumes json입력
produces 자동출력
(count > 0) ? new ResponseEntity<String>("success", HttpStatus.OK") :new ResponseEntity<String>("fail, HttpStatus.BAD_GATE_WAY");
${this}.serializeObject();

------------------------------------------------------------
-- 13일차 6교시 --
BoardRestController
파일전송할 때 enctype은 멀티파트37분
onsubmit(aaa 0~) 38분 이거 안 쓸것이다.

$('form#frm').on('submit', function(event){
	event.PreventDefault();

	this // event.target 이벤트소스(이벤트가 발생한 대상 오브젝트를의미)

	전부안되면
	$('form#frm')[0] 42분 0번째인덱스 가져오면 객체나옴;

	let form = $(this)[0]
});
------------------------------------------------------------
-- 13일차 7교시 스프링 과제--
form태그에 enctype 있으니 굳이 안해줘도됨
$.ajax({
	url: '/api/boards',
	enctype 생략가능
	method:'POST',
	data: formData,
	processData: false, //파일전송시에만 false설정 필수
	contentType: false,
	success: function(){
		console.log(typeof data);
		console.log(data);
		
	},
	error: function (request, status, error){
		alert('code: ' + request.status + '\n message: ' + request
	}
});

코로나 또는 통계자료 같은거 공공API 파싱하려면 

검색하다보면 open API같은거를 가져와서 쓴다고 하는 말이 있던데
그거는 어떤 기술을 쓰는지 궁금합니다.

clone 
얕은복사 객체를 주소만 복사  -- 이 내용 중요 17분 
시험은 수업위주로 
스프링 과제물

------------------------------------------------------------
-- 14일차 1교시 --
필기: 객관식 오픈북
실기: 배웠던것을 기반으로.. 새로운 추가기능 응용 6문항
1. 내정보관리의 비밀번호 변경 비크립트 기존비밀번호 일치여부
2. update set으로 (글수정같은거), 회원정보수정 파일업로드 프로필사진, 업로드경로
프로필전용 테이블 uuid, uploadpath, filename, mid 라이브러리이용해서 썸네일이미지
회원탈퇴시 프로필 사진
쿼츠스케쥴러
3. 
4. 게시판 갤러리기능 갤러리는 이미지만 불러오기 attach첨부파일 filetype I인거 불러오기
5. REST API 보드
6. REST 방식

------------------------------------------------------------
-- 14일차 2교시 --
과제 설명
갤러리는 공개게시판
로그인여부 부변부로직 인터셉터 설정
------------------------------------------------------------
-- 14일차 3교시 --

------------------------------------------------------------
-- 14일차 4교시 --

------------------------------------------------------------
-- 14일차 5교시 --

------------------------------------------------------------
-- 14일차 6교시 --

------------------------------------------------------------
-- 14일차 7교시 --
https://khj93.tistory.com/entry/Spring-Spring-Framework%EB%9E%80-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC

https://eneffet.tistory.com/50

https://eneffet.tistory.com/50

https://siyoon210.tistory.com/4

https://engkimbs.tistory.com/746



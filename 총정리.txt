-- 2일차 4교시 스프링 레거시--
스프링 프로젝트는 메이븐을 빌드도구로 끼고 한다.

src/test/java 는 JUnit 같은 테스트를 위한 것이다.
src/test/resources 는 xml같은 설정파일같은 거

src/main/java와 src/main/resources 만 배포할 때 쓴다.

기본적으로 스프링은 MVC프로젝트이다.

maven은 pom.xml이 있다. project object model 프로젝트를 관리하는 설정파일

빌드도구 : 프로젝트를 최종적으로 배포할 수 있도록 해주는 도구
컴파일 빌드 등등
pom.xml에서 라이브러리를 관리한다.
dependency 한개한개가 라이브러리 정보이다.

src폴더 밑에 webapp이라는 폴더가 외부에 공개되어 있다.(기준폴더)
외부에서 주소를 쳐서 접근 가능한 폴더이다.
WEB-INF는 비공개.

모델1: webapp에서 직접적으로 jsp 요청
모델2: MVC패턴 

모델1은 서버코드와 브라우저코드와 함께
모델2(MVC)는 컨트롤러 < - > 모델 , 컨트롤러 < - > 뷰
------------------------------------------------------------

-- 2일차 5교시 jsp로 변환--
HTML(부트스트랩으로 작성한 것을) jsp로 변환했다.
프로젝트 우클릭 속성 projectFacet 서버runtime 추가
------------------------------------------------------------

--2일차 6교시는 모듈화 작업, views로 옮기기--
include 폴더 만들고 푸터, 헤드, 네브, 자바스크립트를 만든다
<%-- --> 이거는 서버주석으로 불리며 브라우저가 출력 안한다. 
<!-- --> 이거는 브라우저 주석
<jsp: include page"/include/topNavbar.jsp"></jsp:include>
슬러시를 맨앞에 붙여주면 webapp에서 시작하므로 절대주소같다.

WEB-INF의 views 폴더로 작업파일 및 폴더 옮기기!
css, js, images 같은 것들은 webapp하위에 있는 resources폴더로 옮긴다.
그런다음 빨간줄 뜨는데 주소를 전부 수정해주면된다.(WEB-INF로)
------------------------------------------------------------

--2일차 7교시 @Controller와 컨트롤러class, EL언어 언급(${org.springframework-version} --
HomeController의 설명
스프링은 애너테이션기반(@Controller)
(예시) 클래스위에 @Controller를 붙이면 컨트롤러 역할을하는 클래스가 된다.

@Controller
public class HomeController{
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
}

컨트롤 + 시프트 + o 누르면 import가 자동 정리된다.
컨트롤 + 시프트 + f 누르면 줄정렬이 자동으로 된다.

메이븐 저장소(mavenrepository) 검색어: springcontext(버전5.2.16 릴리즈), servlet(4.0.1)
pom.xml에서 <properties>는 변수 이름, <dependencies>는 의존성이 있는 라이브러리를 명시한다. 
<dependency>가 개별 라이브러리이다.
c -> 사용자 -> .m2 -> repository(로컬저장소) 메이븐은 원격저장소

[pom.xml 수정한 것]
{
	<java-version>1.8</java-version>
	<org.springframework-version>5.2.16.RELEASE</org.springframework-version>

	<dependencies>
		<dependency>
			servlet버전 4.0.1
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				maven-compiler-plugin 3.8.1
				configuration 버전 source와 target을 ${java-version}
			</plugin>
		</plugins>
	</build>
} 수정후에는 maven update project를 꼭 해줘라.

[servlet-context.xml]
{
	InternalResourceViewResolver에 프리픽스와 서픽스 값을 봐라
}


@Controller
public class HomeController{
	
	@GetMapping(value = "/") (value는 생략가능하다)
	public void Home(){
		System.out.println("home() 출력됨...);
	return "/WEB-INF/views/index.jsp"; 이거를
	return "index"; 요렇게 해라
	}
}

서버에 Add and Remove설정법과 Web Modules에서 Path를 /로 바꾸기

스프링프레임워크가 우리의 코드를 사용하는 것이다.
3일차 1교시에 Dispatcherservlet 이걸 배울 것이다.

------------------------------------------------------------
-- 3일차 1교시 서블릿 설명--
스프링레거시와 스프링부트가 있다.
스프링은 설정이 반이다.
pom.xml은 maven이 쓴다.
web.xml은 tomcat이 쓴다.

톰캣은 서블릿 jsp 컨테이너, jsp도 서블릿 클래스로 변환되어서 실행된다.
톰캣은 하나의 서블릿을 실행하는 플랫폼

서블릿 설정하는 방식이 2가지가 있다.
1. 애너테이션으로 등록
2. <servlet></servlet>이런식으로 하는 방법 servlet-class는 httpservlet을 상속받음.

<servlet>
	<servlet-name>myController</servlet-name>
	<servlet-class>ch18.com.controller.MyController</servlet-class>
</servlet>

<servlet-mapping>
	<servlet-name>myController</servlet-name>
	<url-pattern>/</url-pattern>
</servlet-mapping>

위에 두개는 myController로 연결된다.

jsp교재 619에 HttpServlet을 상속받으면 doPost 등을 쓸 수 있게 되는 것이다.
요청만 처리하는 것에는 servlet이 효율적이므로 jsp를 안쓰고 servlet을 쓴다.
스프링프레임워크는 Dispatcher서블릿과 
톰캣이 프레임워크로 봐도 된다. doGet같은걸 호출하는게 안보임
------------------------------------------------------------
-- 3일차 2교시 web.xml설정, DispatcherServlet --
web.xml 설정
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee;(여기에 세미콜론 넣으면 빨간줄 사라짐) https://java.sun.com/xml/ns/javaee/web-app_4_0.xsd">

listener에 대해 설명(ContextLoaderListener) 프로그램 로드 리스너. 톰캣이 최초 기동 될 때 
스프링이 사용하는 설정파일을 읽어들이는 것
리스너는 미리 등록한 약속된 작업을 해주는 것
톰캣이 web.xml 파싱 -> 리스너 실행 -> context-param을 가져간다(setContext~~) -> root-context.xml
안드로이드도 스프링으로 가능함.

스프링은 DispatcherServlet이 전면에 등장. 역할은 프론트컨트롤러인데 실제론 서블릿
p621 
1. if(command.equals("/BoardWriteAction.do")){
(이게 @GetMapping("/")이다.

2.	requestBoardWrite(request);( 이게 HomeController에서 String home()메서드이다.)

3.	RequestDispatcher rd = request.getRequestDispatcher("/BoardListAction.do");
	(이게 HomeController에서 return "index"; 부분이다)

	rd.forward(request, response);
}

DispatcherServlet은 위에 621이 제공하는것을 포함하고, 더 다양한 것을 제공한다.
appServlet의 servlet-context.xml이 핵심엔진

bean은 object이고 스프링이 사용하는 객체를 뜻한다.

servlet-context.xml의 <annotation-driven/>있는데 
이것은 @Controller가 마킹되어 있는 것(해당클래스)을
DispatcherServlet이 호출할 수 있게 하는 프로그램
@Controller가 빠지면 DispatcherServlet이 인식못함.
2~3(621 14~15줄)을 스프링에서는 자동으로 생성해주는 것이다.

root-context.xml은 데이터베이스 관련된 것을 설정하는 곳이다.
------------------------------------------------------------
-- 3일차 3교시 pom.xml설정, DB pool --
<load-on-startup>1</load-on-startup> 이거는 첫번째 요청한 사람도 딜레이없이 빠르게 응답받도록
요청~ 서블릿 이런 패턴을 여러개 만들 수 있다.
그 때 1이라고 하면 우선순위가 높은 것이다.
[pom.xml 수정한 것]
{
	<dependencies>
		<dependency>
			Spring TestContext Framework 5.2.16.RELEASE
			Spring JDBC 5.2.16.RELEASE
			Spring Transaction 5.2.16.RELEASE
			마이바티스 3.5.7
			마이바티스-spring 2.0.6
			Mysql Connector 8.0.26(DB연결 드라이버)
			com.zaxxer에 HikariCP 5.0.0
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
		
			</plugin>
		</plugins>
	</build>
} 수정후에는 maven update project를 꼭 해줘라.
마이바티스(DB반복작업 도와주는 모듈, 스프링이랑 연동)
JPA
------------------------------------------------------------
-- 3일차 4교시 pom.xml설정, --


